TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 19 - 19
   tagLevel = 8
   numWords = 3
   numWordsInAnchorText = 0
   numWrappedLines = 1
   linkDensity = 0
   isContent = True
'November 17, 2012'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 20 - 20
   tagLevel = 6
   numWords = 89
   numWordsInAnchorText = 7
   numWrappedLines = 7
   linkDensity = 0.07865168539325842
   isContent = True
'In previous articles, I&#8217;ve focused on creating a Node.js server to handle HTTP requests. This article looks at the problem in reverse, by showing you how to make HTTP requests from your Node.js applications. You may be asking yourself why you would want to do that. Two applications come to mind right away &#8211; web scraping and proxying. Scrapers are pieces of software which download web pages and programatically extract information from them. Proxy servers act as intermediaries, forwarding client requests to other servers and returning the responses.'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 21 - 21
   tagLevel = 6
   numWords = 3
   numWordsInAnchorText = 0
   numWrappedLines = 1
   linkDensity = 0
   isContent = True
'The Request Module'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 22 - 22
   tagLevel = 6
   numWords = 56
   numWordsInAnchorText = 6
   numWrappedLines = 4
   linkDensity = 0.10714285714285714
   isContent = True
'The simplest way to create HTTP requests in Node.js is by using the request module. Written by Mikeal Rogers, request allows you to make all types of HTTP requests, including GET, POST, PUT, and DELETE. Its flexibility makes the request module ideal for interacting with RESTful APIs. You can install request using the following npm command.'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 23 - 23
   tagLevel = 6
   numWords = 3
   numWordsInAnchorText = 0
   numWrappedLines = 1
   linkDensity = 0
   isContent = True
'npm install request'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 24 - 24
   tagLevel = 6
   numWords = 65
   numWordsInAnchorText = 0
   numWrappedLines = 4
   linkDensity = 0
   isContent = True
'Once you have installed request, create a new Node.js file containing the code shown below. The first line of the example is used to import request into the program. Making an HTTP request is as simple as calling the request() function. In this example, we are making a request to download the JSPro homepage. The second argument to request() is, of course, a callback function.'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 25 - 25
   tagLevel = 6
   numWords = 12
   numWordsInAnchorText = 0
   numWrappedLines = 1
   linkDensity = 0
   isContent = True
'var request = require(&quot;request&quot;);

request(&quot;http://www.sitepoint.com&quot;, function(error, response, body) {
  console.log(body);
});'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 26 - 26
   tagLevel = 6
   numWords = 75
   numWordsInAnchorText = 0
   numWrappedLines = 5
   linkDensity = 0
   isContent = True
'The request() callback function takes three arguments &#8211; error, response, and body. As the name implies, error contains information regarding any problems that occurred during the HTTP request. The response argument is an object containing a variety of data returned from the call, including the status code, headers, and much more. The third callback argument, body, is the body of the response. In the previous example, body contained the source code for the JSPro homepage.'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 27 - 27
   tagLevel = 6
   numWords = 45
   numWordsInAnchorText = 3
   numWrappedLines = 3
   linkDensity = 0.06666666666666667
   isContent = True
'The request module can also be combined with the file system module to stream HTTP requests to and from files. The following example again fetches JSPro. However, instead of displaying the source code in the console, it is written to a file named &#8220;jspro.htm&#8221;.'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 29 - 29
   tagLevel = 6
   numWords = 2
   numWordsInAnchorText = 0
   numWrappedLines = 1
   linkDensity = 0
   isContent = True
'Parameterizing Requests'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 30 - 30
   tagLevel = 6
   numWords = 59
   numWordsInAnchorText = 0
   numWrappedLines = 4
   linkDensity = 0
   isContent = True
'The previous examples have created simple GET requests for URLs. However, we can modify the HTTP request by passing a configuration object as the first argument to request(). The following example uses the more powerful syntax to again download JSPro. Notice the numerous configuration parameters. The uri and method parameters tell request to send a GET request to JSPro.'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 31 - 31
   tagLevel = 6
   numWords = 22
   numWordsInAnchorText = 0
   numWrappedLines = 3
   linkDensity = 0
   isContent = True
'var request = require(&quot;request&quot;);

request({
  uri: &quot;http://www.sitepoint.com&quot;,
  method: &quot;GET&quot;,
  timeout: 10000,
  followRedirect: true,
  maxRedirects: 10
}, function(error, response, body) {
  console.log(body);
});'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 32 - 32
   tagLevel = 6
   numWords = 66
   numWordsInAnchorText = 0
   numWrappedLines = 5
   linkDensity = 0
   isContent = True
'The timeout parameter tells request to wait 10,000 milliseconds (ten seconds) for a response before giving up. The final two parameters deal with following redirects. Many pages perform redirects behind the scenes without the user&#8217;s knowledge. The followRedirect and maxRedirects parameters instruct request to follow up to ten 3xx HTTP redirects. Also, note that request() supports many other parameters which are not shown here.'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 33 - 33
   tagLevel = 6
   numWords = 3
   numWordsInAnchorText = 0
   numWrappedLines = 1
   linkDensity = 0
   isContent = True
'Submitting Form Data'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 34 - 34
   tagLevel = 6
   numWords = 55
   numWordsInAnchorText = 0
   numWrappedLines = 3
   linkDensity = 0
   isContent = True
'As previously mentioned, request supports more than just GET requests. One very common operation is the submission of form data using a POST request. The following example uses the form parameter of request() to send a user&#8217;s name as part of a POST. The PHP page then responds by greeting the user by name.'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 36 - 36
   tagLevel = 6
   numWords = 3
   numWordsInAnchorText = 0
   numWrappedLines = 1
   linkDensity = 0
   isContent = True
'Dealing with Cookies'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 37 - 37
   tagLevel = 6
   numWords = 99
   numWordsInAnchorText = 1
   numWrappedLines = 7
   linkDensity = 0.010101010101010102
   isContent = True
'Many sites track various user interactions using cookies. Cookies are small pieces of data that are passed back and forth between the client and server with every HTTP transaction. To facilitate the use of cookies, request provides the jar() and cookie() methods. Individual cookies are created using the cookie() method. On line 3 of the following example, a cookie is created which specifies the user&#8217;s name. The cookie is then added to the cookie jar created on line 2. When the HTTP request is made, the jar parameter is used to send the cookie jar to the server.'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 38 - 38
   tagLevel = 6
   numWords = 28
   numWordsInAnchorText = 0
   numWrappedLines = 3
   linkDensity = 0
   isContent = True
'var request = require(&quot;request&quot;);
var jar = request.jar();
var cookie = request.cookie(&quot;name=John&quot;);

jar.add(cookie);
request({
  uri: &quot;http://www.cjihrig.com/development/php/hello_cookies.php&quot;,
  method: &quot;GET&quot;,
  jar: jar
}, function(error, response, body) {
  console.log(body);
});'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 39 - 39
   tagLevel = 6
   numWords = 82
   numWordsInAnchorText = 0
   numWrappedLines = 5
   linkDensity = 0
   isContent = True
'When the response is received, the user will be greeted as John, the name stored in the cookie. The cookie jar is also updated with any changes made by the server. If you print out the cookie jar before and after the request, you&#8217;ll see that the server changed the value of the cookie from "John" to "Stranger". The same cookie jar can be passed to consecutive HTTP requests in order to mimic a real user&#8217;s interactions with a site.'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 40 - 40
   tagLevel = 6
   numWords = 1
   numWordsInAnchorText = 0
   numWrappedLines = 1
   linkDensity = 0
   isContent = True
'Conclusion'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 41 - 41
   tagLevel = 6
   numWords = 47
   numWordsInAnchorText = 0
   numWrappedLines = 3
   linkDensity = 0
   isContent = True
'This article has introduced the simple, yet powerful, request module. As this article is not comprehensive, I recommend at least browsing over the documentation to see what else request can do. Stay tuned for an upcoming article which will cover web scraping using request in more depth.'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 42 - 42
   tagLevel = 6
   numWords = 40
   numWordsInAnchorText = 4
   numWrappedLines = 3
   linkDensity = 0.1
   isContent = True
'And if you enjoyed reading this post, you&#8217;ll love Learnable; the place to learn fresh skills and techniques from the masters. Members get instant access to all of SitePoint&#8217;s ebooks and interactive online courses, like Jump Start JavaScript.'

TextBlock:
   offsetBlocksStart - offsetBlocksEnd = 45 - 45
   tagLevel = 8
   numWords = 20
   numWordsInAnchorText = 0
   numWrappedLines = 1
   linkDensity = 0
   isContent = True
'Get unlimited access to all SitePoint books and courses for 30-days. Learn Responsive Web Design, HTML5, CSS3, and tons more!'

number of text blocks: 65
number of content blocks: 23
